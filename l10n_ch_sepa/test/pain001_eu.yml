-
  In order to test pain.001 export I make an invoice and create the SEPA message from it.
-
  I create a bank with a BIC number
-
  !record {model: res.bank, id: pain001_bank}:
    name: 'Big bank'
    bic: 'DRESDEFF300'
    country: base.fr


-
  I create a bank account
-
  !record {model: res.partner.bank, id: pain001_partner_bank}:
    state: 'iban'
    name: 'Account'
    bank: pain001_bank
    acc_number: 'CH9100767000S00023455'
    partner_id: base.res_partner_2

-
  I create a bank account
-
  !record {model: res.partner.bank, id: pain001_company_bank}:
    state: 'iban'
    name: 'Account for company'
    bank: pain001_bank
    acc_number: 'CH9100767000S00023455'
    partner_id: base.main_partner


-
  I create a payment mode
-
  !record {model: payment.mode, id: pain001_pay_mode}:
    name: 'pain001'
    bank_id: pain001_company_bank
    journal: !ref {model: account.journal, search: "[('type','=','bank')]"}

-
  I create an invoice on 1st January for 7000 EUR
  ###########################
  #   Creating 1 invoice    #
  ###########################
-
  !record {model: account.invoice, id: pain001_account_invoice, view: account.invoice_supplier_form}:
    company_id: base.main_company
    journal_id: account.bank_journal
    currency_id: base.EUR
    account_id: account.a_pay
    type : in_invoice
    partner_id: base.res_partner_2
    commercial_partner_id : base.res_partner_2
    reference_type: bvr
    reference: 111111111111111111111111111111
    date_invoice: !eval "'%s-01-01' %(datetime.now().year)"
    period_id: account.period_1
    partner_bank_id: pain001_company_bank
    check_total : 1000
    invoice_line:
      - account_id: account.a_expense
        name: 'a name'
        price_unit: 1000.0
        quantity: 1.0
        product_id: product.product_product_5
        uos_id: product.product_uom_unit
    journal_id: account.expenses_journal
-
  I Validate invoice by clicking on Validate button
-
  !workflow {model: account.invoice, action: invoice_open, ref: pain001_account_invoice}

-
  I create my payment order to pay my invoice
  ###########################
  #   Doing payment order   #
  ###########################
-
  !record {model: payment.order, id: pain001_payment_order}:
    #date_created
    #date_done
    date_prefered: due
    #date_scheduled
    #line_ids:
    mode: pain001_pay_mode
    #reference
    state: draft
    total: 1000
    #user_id
-
  I add a payment line to my payment order
-
  !record {model: payment.line, id: pain001_pay_line}:
    amount: 1000
    amount_currency: 1000
    bank_id: pain001_partner_bank
    #bank_statement_line_id
    communication: "111111111111111111111111111111"
    #communication2
    company_currency: base.EUR
    #create_date
    currency: base.EUR
    #date
    #info_owner
    #info_partner
    #ml_date_created
    #ml_inv_ref
    #ml_maturity_date
    move_line_id: !ref {model: account.move.line, search: "[('ref','=','111111111111111111111111111111')]"}
    #name  (reference)
    order_id: pain001_payment_order
    partner_id: base.res_partner_2
    state: normal

-
  I confirm my payment order
-
  !workflow {model: payment.order, action: open, ref: pain001_payment_order}

-
  I set country to main company
-
  !python {model: res.partner, id: base.main_partner}: |
    self.country_id = self.env.ref('base.ch')

-
  Use the wizard to generate the pain 001 message
-
  !python {model: wizard.pain001}: |
    import base64
    wiz_id = self.create(cr, uid, {})
    wiz = self.browse(cr, uid, wiz_id)

    pay_order_id =  ref("pain001_payment_order")
    #set the payment order as the active id
    result = wiz.with_context(active_ids=[pay_order_id], active_id=pay_order_id).create_pain_001()

    assert result, "No result returned"

    data = wiz.read(['pain_001_file'])
    pain_001_file = base64.decodestring(data[0]['pain_001_file'] or '')
    assert pain_001_file, "File is empty"
